import 'package:flutter/material.dart';
import 'dart:ui' as ui;

void main() {
  runApp(const MaterialApp(
    debugShowCheckedModeBanner: false,
    home: SimpleDrawingApp(),
  ));
}

class SimpleDrawingApp extends StatefulWidget {
  const SimpleDrawingApp({Key? key}) : super(key: key);

  @override
  State<SimpleDrawingApp> createState() => _SimpleDrawingAppState();
}

class _SimpleDrawingAppState extends State<SimpleDrawingApp> {
  // Store all the points drawn by the user
  List<Offset?> points = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Simple Drawing App'),
        backgroundColor: Colors.blueAccent,
      ),
      backgroundColor: Colors.white, // White background
      body: GestureDetector(
        onPanUpdate: (details) {
          setState(() {
            // Convert global touch point to local coordinate
            RenderBox box = context.findRenderObject() as RenderBox;
            points.add(box.globalToLocal(details.globalPosition));
          });
        },
        onPanEnd: (details) {
          // Add a null to mark the end of a stroke
          points.add(null);
        },
        child: CustomPaint(
          painter: DrawingPainter(points),
          size: Size.infinite,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.redAccent,
        child: const Icon(Icons.delete),
        onPressed: () {
          setState(() {
            points.clear(); // Clear the canvas
          });
        },
      ),
    );
  }
}

class DrawingPainter extends CustomPainter {
  final List<Offset?> points;

  DrawingPainter(this.points);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black
      ..strokeCap = StrokeCap.round
      ..strokeWidth = 4.0;

    // Draw lines between all continuous points
    for (int i = 0; i < points.length - 1; i++) {
      if (points[i] != null && points[i + 1] != null) {
        canvas.drawLine(points[i]!, points[i + 1]!, paint);
      }
    }
  }

  @override
  bool shouldRepaint(DrawingPainter oldDelegate) => oldDelegate.points != points;
}
